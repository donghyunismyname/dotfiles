" colorscheme
syntax enable "make colorscheme work on mac
" colorscheme jellybeans
colorscheme hybrid


set autoread
autocmd FocusGained,BufEnter * checktime
autocmd CursorHold,CursorHoldI * checktime


filetype plugin on  "understand file types
set pastetoggle=<f2> "togle paste mode
autocmd FileType * set formatoptions-=o "disable autoindent


"togglw word wrap
map zw :set wrap!<cr>
"with word wrap, move cursor by each display line
noremap <expr> j v:count ? 'j' : 'gj'
noremap <expr> k v:count ? 'k' : 'gk'


" pick up cursor where last left
au BufReadPost *
\ if line("'\"") > 0 && line("'\"") <= line("$") |
\ exe "norm g`\"" |
\ endif


autocmd FocusLost * silent write


"automatically strip trailing whitespace when a file is saved
autocmd BufWritePre * :%s/\s\+$//e


" Cursor shape
" https://nickjanetakis.com/blog/change-your-vim-cursor-from-a-block-to-line-in-normal-and-insert-mode
" Use a line cursor within insert mode and a block cursor everywhere else.
" Reference chart of values:
"   Ps = 0  -> blinking block.
"   Ps = 1  -> blinking block (default).
"   Ps = 2  -> steady block.
"   Ps = 3  -> blinking underline.
"   Ps = 4  -> steady underline.
"   Ps = 5  -> blinking bar (xterm).
"   Ps = 6  -> steady bar (xterm).
let &t_EI = "\e[1 q" " normal
let &t_SI = "\e[5 q" " insert


" various basic options
set nocompatible    "disable compatibility to old-time vi
set number          "line number on the left
set relativenumber  "relative line number
set autoindent      "autoindent
set nohlsearch      "no highlight search (better use easymotion)
set ignorecase      "ignore case for search
set incsearch       "show search result for input character
set showmatch       "highlight matching brackets
set mouse=a         "allow mouse
set ts=4            "tap size
set sw=4            "shift width for use with >, <, or =
set expandtab       "spaces instead of tabs; `:retab` to change taps to spaces
set sts=4           "make spaces feel like tabs (like deleting)
set colorcolumn=80  "show vertical line at column 80
set nowrap          "no wraparound trailing characters
set scrolloff=10    "show code above and below cursor
set list            "make whitespaces visible
set listchars=tab:>-,trail:~,extends:>,precedes:<
set nostartofline   "keep column position when c-u or c-d
set clipboard=unnamedplus "use system clipboard
set gdefault        "substitute all matches in a line



"display cursorline
set cursorline
set cursorcolumn


"Show no cursorline on insert mode
"autocmd insertenter * set nocursorline
"autocmd insertleave * set cursorline
"autocmd insertenter * set nocursorcolumn
"autocmd insertleave * set cursorcolumn


"jk to escape insert mode
inoremap jk <esc>


" use system clipboard for yank and paste
" noremap y *y
" noremap Y *y$
" noremap p *p
" noremap P *P

"after yanking, visual mode keeps going
vmap y ygv
vmap Y ygv
"paste without overriding current register
vmap p pgvy
vmap P Pgvy


"indent/unindent faster
vnoremap > >gvllll
vnoremap < <gvhhhh
nnoremap > >>llll
nnoremap < <<hhhh


" easier serach and replace
vnoremap r :s/


" vv to visual line
vnoremap v V


" find same word
noremap , #
noremap . *


"left/down/up/left faster
noremap H ^
noremap L $
noremap J 5j
noremap K 5k


"move with current line up/down
" noremap U <cmd>m-2<cr>
" noremap M <cmd>m+1<cr>


" leader key as space
let mapleader = " "


"split panes
nnoremap <leader>h :vs<cr>
nnoremap <leader>j :sp<cr><c-w>j
nnoremap <leader>k :sp<cr>
nnoremap <leader>l :vs<cr><c-w>l


"remap :w and :q
nnoremap <leader>w :w<cr>
nnoremap <leader>q :q<cr>


"reload .vimrc
" nnoremap <leader>r :source $MYVIMRC<cr>


" plugin: vim-commentary
nmap ' gcc
vmap ' gcgv


" plugin: vim-mucomplete
set completeopt+=menuone
set completeopt+=noselect
let g:mucomplete#enable_auto_at_startup = 1
let g:mucomplete#no_mappings = 1


"plugin: vim-airline
let g:airline_powerline_fonts=1
let g:airline_symbols_ascii=1
let g:airline#extensions#whitespace#enabled=0


" plugin: vim-easymotion
" nmap <cr> <Plug>(easymotion-overwin-w)
" vmap <cr> <Plug>(easymotion-bd-jk)

" Better than vim default search
map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)
" These `n` & `N` mappings are options. You do not have to map `n` & `N` to EasyMotion.
" Without these mappings, `n` & `N` works fine. (These mappings just provide
" different highlight method and have some other features )
map  n <Plug>(easymotion-next)
map  N <Plug>(easymotion-prev)


" plugin: vim_current_word
" let g:vim_current_word#highlight_delay = 1000 " milliseconds
hi CurrentWord ctermbg=237
hi CurrentWordTwins ctermbg=237
hi Visual cterm=none ctermbg=darkgrey ctermfg=cyan


" plugin: kqito/vim-easy-replace
" vnoremap r :<c-u>EasyReplaceWordInVisual<cr>
" vnoremap R :<c-u>EasyReplaceCwordInVisual<cr>




"plugin: vim-fzf
set rtp+=~/.fzf

"vim-fzf settings from Wookayin
function! Trim(input_string)
    return substitute(a:input_string, '^\s*\(.\{-}\)\s*$', '\1', '')
endfunction

function! s:get_git_dir(path)
  let curr = fnamemodify(expand(a:path), ':p')
  if empty(curr)   " empty buffer, etc.: fall back to current dir
    let curr = getcwd()
  endif
  try
    return FugitiveExtractGitDir(curr)
  catch /E117/  " Unknown function: maybe incompatible fugitive
    return fugitive#extract_git_dir(curr)
  endtry
endfunction

" Command :F (FzfSmart)
function! FzfSmart(path) abort
  " If args are given (e.g. :F <args>), run :Files <args>
  let l:path = Trim(a:path)
  if !empty(l:path)
    let l:path = expand(l:path)
    if !isdirectory(l:path)   " for a file, the directory that contains it
      if filereadable(l:path)
        let l:path = fnamemodify(l:path, ":h")
      else  " does not exist, error
        echohl WarningMsg | call Echom('Does not exist: ' . l:path) | echohl NONE | return 0
      endif
    endif
  endif

  " (1) If a FZF tree/explorer is shown with no argument,
  " invoke :Files (with preview) rather than :GFiles
  if empty(l:path) && index(['nerdtree'], &filetype) >= 0
    let l:target_path = b:NERDTree.root.path._str()
    " if the current buffer is the pinned on in the tab (vim-nerdtree-tabs),
    " let fzf open files in another window. Otherwise, open in the current window.
    if exists('t:NERDTreeBufName') && bufname('%') == t:NERDTreeBufName
      wincmd w   " we need to move the focus outside nerdtree
    endif
    call fzf#vim#files(l:target_path, fzf#vim#with_preview())
    return 1
  endif

  " (2) If the given path (or CWD) is in a git repo,
  " invoke :GFiles (plus untracked files)
  let l:git_dir = s:get_git_dir(!empty(l:path) ? l:path : '%')
  if ! empty(l:git_dir)
    let l:old_cwd = getcwd()
    execute ':tcd ' . l:git_dir . '/..'
    echon ':GFiles (' | echohl Directory | echon getcwd() | echohl NONE | echon ')' | echon '    '
    GFiles -c -o --exclude-standard
    execute ':tcd ' . l:old_cwd
    return 2

  " (3) not in git repo, invoke :Files <args> by fallback
  else
    execute ':Files ' . l:path
    return 3
  endif
endfunction

" :F is a shortcut for :GFiles or :FZF
command! -complete=dir -nargs=* F        call FzfSmart(<q-args>)

" Invoke F (FZF) Using Ctrl-P
" nmap <C-P> :bw<cr>:F<CR>
" nmap <C-P> :F<CR>
" nmap <leader><leader> :History<cr>
nmap <leader>o :F<cr>






