(defsrc
  grv  1    2    3    4    5    6    7    8    9    0    -    =    bspc
  tab  q    w    e    r    t    y    u    i    o    p    [    ]    \
  caps a    s    d    f    g    h    j    k    l    ;    '    ret
  lsft z    x    c    v    b    n    m    ,    .    /    rsft
  lctl lmet lalt           spc                 ralt rmet rctl
)


(defvar
  tt 200 ;; tab timeout
  ht 200 ;; hold timeout
)

(defalias
	spc-nav (tap-hold $tt $ht spc (layer-while-held nav))
  esc-ctl (tap-hold $tt $ht esc ctl)
)
(defalias
	qt-alt (tap-hold $tt $ht ' alt)
  sem-sft (tap-hold $tt $ht ; sft)
  a-sft (tap-hold $tt $ht a sft)
)
(defalias
  mouse (layer-while-held mouse)
)

(deflayer base
  grv       1         2         3         4         5         6         7         8         9         0         -         =         bspc
  tab       q         w         e         r         t         y         u         i         o         p         [         ]         \
  @esc-ctl  a         s         d         f         g         h         j         k         l         ;         '         ret
  sft       z         x         c         v         b         n         m         ,         .         /         rsft
  ctl       met       alt                           @spc-nav                                ralt      rmet      rctl
)

 
(deflayer nav 
  grv       1         2         3         4         5         6         7         8         9         0         -         =         bspc
  tab       esc       bck       fwd       C-S-tab   C-S-t     _         home      C-left    C-rght    end       _         _         \
  @esc-ctl  @mouse    alt       ctl       sft       C-tab     left      down      up        rght      sft       _         _ 
  sft       C-z       C-y       C-c       C-v       _         _         C-bspc    bspc      del       C-del     rsft
  ctl       met       alt                           spc                                     ralt      rmet      rctl
)

(deflayer mouse
  _    _    _    _    _    _    _    _    _    _     _    _    _    _
  _    _    _    @ma↑ _    _    _    _    @mwu _     _    _    _    _
  _    _    @ma← @ma↓ @ma→ _    _    mlft @mwd mrgt  _    _    _
  _    _    _    _    _    _    _    _    _    _     _    _
  _    _    _    @fms _    _    _
)

;; (deflayer mouse
;;   _    @mwu @mwd @mwl @mwr _    _    _    _    _    @ma↑ _    _    _
;;   _    pgup bck  _    fwd  _    _    _    _    @ma← @ma↓ @ma→ _    _
;;   _    pgdn mlft _    mrgt mmid _    mbck mfwd _    @ms↑ _    _
;;   @fms _    mltp _    mrtp mmtp _    mbtp mftp @ms← @ms↓ @ms→
;;   _    _    _              _              _    _    _
;; )


(defalias
  ;; Mouse wheel actions. The first number is the interval in milliseconds
  ;; between scroll actions. The second number is the distance in some arbitrary
  ;; unit. Play with the parameters to see what feels correct. Both numbers
  ;; must be in the range 1-65535
  ;;
  ;; In both Windows and Linux, 120 distance units is equivalent to a single
  ;; notch movement on a physical wheel. In Linux, not all desktop environments
  ;; support the REL_WHEEL_HI_RES event so if you experience issues with `mwheel`
  ;; actions in Linux, using a distance value that is multiple of 120 may help.
  mwu (mwheel-up 50 120)
  mwd (mwheel-down 50 120)

  ;; Horizontal mouse wheel actions. Similar story to vertical mouse wheel.
  mwl (mwheel-left 50 120)
  mwr (mwheel-right 50 120)

  ;; Mouse movement actions.The first number is the interval in milliseconds
  ;; between mouse actions. The second number is the distance traveled per interval
  ;; in pixels.

  ms↑ (movemouse-up 5 1)
  ms← (movemouse-left 5 1)
  ms↓ (movemouse-down 5 1)
  ms→ (movemouse-right 5 1)

  ;; Mouse movement actions with linear acceleration. The first number is the
  ;; interval in milliseconds between mouse actions. The second number is the time
  ;; in milliseconds for the distance to linearly ramp up from the minimum distance
  ;; to the maximum distance. The third number is the minimum distance traveled
  ;; per interval in pixels. The fourth number is the maximum distance traveled
  ;; per interval in pixels.

  ma↑ (movemouse-accel-up 5 500 1 3)
  ma← (movemouse-accel-left 5 500 1 3)
  ma↓ (movemouse-accel-down 5 500 1 3)
  ma→ (movemouse-accel-right 5 500 1 3)

  ;; setmouse places the cursor at a specific pixel x-y position. This
  ;; example puts it in the middle of the screen. The coordinates go from 0,0
  ;; which is the upper-left corner of the screen to 65535,65535 which is the
  ;; lower-right corner of the screen. If you have multiple monitors, they are
  ;; treated as one giant screen, which may make it a bit confusing for how to
  ;; set up the pixels. You will need to experiment.
  sm (setmouse 32228 32228)

  ;; movemouse-speed takes a percentage by which it then scales all of the
  ;; mouse movements while held. You can have as many of these active at a
  ;; given time as you would like, but be warned that some values, such as 33
  ;; may not have correct pixel distance representations.
  fms (movemouse-speed 500)
)